[[{"i":"edql-elasticsearch-gui-client-and-qsharp-elasticsearch-ide","l":"EDQL: Elasticsearch GUI Client and QSharp Elasticsearch IDE","p":["EDQL is a professional query and management tool for Elasticsearch. It's intelligent and powerful for manage Elasticsearch cluster and query from Elasticsearch. also It always follow Elasticsearch newest features.","It is full compatible with official Query DSL, can just copy query DSL and run on EDQL without any extra effort. also EDQL has visual editor for quickly write query conditions with interactive UI.","It has powerful script engine: support function, variable and iteration etc. with smart Intellij you can easily write query DSL(refactor, extract etc).","EDQL is cross-platform since it's based on intellij, so It can be used on windows, linux or mac."]},{"i":"why-edql","l":"Why EDQL?","p":["The most important EDQL feature is full compatible with official Query DSL, It means we can copy query DSL from Elasticsearch document and run directly without any extra effort. also EDQL has visual editor feature that can help you use interactive UI to query Elasticsearch without know Elasticsearch syntax.","Elasticsearch Query DSL is complex and hard to learn, event we can use SQL or simple DSL directly query Elasticsearch, but in most cases such as we want to aggs complex time-series data and dig data value, it's hard to achieve. also query dsl is not easily share with team members, but we always want to efficiently collaborate","So based on the above scenarios EDQL implements powerful script engine: support function, variable and iteration etc. with intelligent Intellij you can easily write query DSL(autocomplete, refactor, live templates, extract etc).","For aggregations, EDQL support plotting aggregation results in Intellij directly for analysis data(find more: ), that's powered by vega-lite plot library and is fully compatible with kibana vega-lite plot.","plot"]},{"l":"Feature Overview","p":["Manage Elasticsearch connections: new, delete, modify and test connection. list indices, scripts, nodes, templates, tasks and nodes etc. also new index, modify index, new script, modify script etc.","Query with official Query DSL without any extra effort. so you can quickly verify query syntax and check data","EDQL for query result it support 3 modes: table mode, JSON mode, plot mode, and these modes support search, highlight, fields selection etc. also we can new modify, delete and export(scroll) documents on Data Viewer table mode.","Works like a script with function, variable or iteration etc, so can quickly create personal query template or library for handling common use cases to reduce duplicate code. also can convert function to IDE shortcut action so we can quickly run function in common scenes"]},{"l":"Getting Started"},{"l":"1. Connect to Elasticsearch","p":["Connect to Elasticsearch by using EDQL Dock Manager, it's default on the Intellij right side. In the EDQL Dock Manager, you can add a new connection to connect Elasticsearch and Test connectivity."]},{"l":"2. Start New Query Console","p":["After create and test a connection of Elasticsearch, you can create new query console on the Dock Toolbar with terminal icon:","or","Query index myindex with custom source fields"]},{"i":"guides-jump-right-in","l":"Guides: Jump right in","p":["Follow our handy guides to get started on the basics as quickly as possible:","install-edql-on-intellij.md","create-edql-script.md","run-edql-request.md"]},{"l":"Use cases with EDQL","p":["EDQL is not only target for query also can help solve multi scenarios problems, you could find use cases by:","query-data.md","analysis-data.md","manage-cluster.md"]},{"l":"Explore More about EDQL Syntax","p":["Experience the power of EDQL, a comprehensive scripting solution that fully supports Elasticsearch Query DSL. With EDQL, you can explore a wide range of features, including functions, variables, collections, types, and iteration. Dive into the world of EDQL and unleash the full potential of scripting with Elasticsearch Query DSL:","basic-syntax.md","script-syntax.md","glossary.md"]},{"l":"QSharp EDQL IDE","p":["QSharp IDE is a powerful standalone IDE designed specifically for Elasticsearch querying. Unlike the EDQL plugin that requires installation within the Intellij IDE, QSharp can be installed independently. This is particularly useful for users who prefer not to install Intellij IDE solely for using EDQL."]}],[{"i":"#","p":["Install EDQL Elasticsearch GUI Client on Intellij"]},{"l":"Installation","p":["EDQL plugin is built on the Jetbrains IDE platform, offering seamless integration with various Jetbrains IDEs. It supports versions >= 221, making it compatible with popular IDEs such as Intellij, Webstorm, and Go Land.","One of the major advantages of the Jetbrains IDE platform is its cross-platform compatibility. Whether you're using Windows, MacOS, or Linux, you can install the Jetbrains IDE and effortlessly incorporate the EDQL plugin into your development workflow.","For different use cases, there are two ways to install EDQL on Intellij IDE Platform"]},{"l":"Jetbrains IDE Plugin Marketplace Installation","p":["Install from Intellij Plugins Marketplace is the simplest way to install EDQL, just open the Intellij plugins marketplace and search EDQL, download, install and restart IDE. also EDQL updates will notify by Intellij updates notification."]},{"l":"Manual Installation","p":["For users who require more control over the installation process or have specific requirements, manual installation is available. you can go to EDQL Plugin website, choose the newest version and download plugin zip.","Once you have downloaded the EDQL plugin, follow these simple steps to complete the installation process:","Open the IDE plugin dialog in Intellij IDE.","Choose the \"Install Plugin from Disk\" option.","Select the downloaded EDQL zip file.","Restart the Intellij IDE to finalize the installation."]}],[{"l":"User Interface"},{"l":"Dock Manager","p":["The EDQL Dock Manager is an integral part of the Intellij IDE user interface, positioned by default on the right side of the screen. It provides a user-friendly interface for efficiently managing connections and script files within the EDQL environment.","With the EDQL Dock Manager, you can effortlessly organize and navigate through your connections, establishing seamless communication with your Elasticsearch clusters. Additionally, it allows you to conveniently manage and access your script files, ensuring easy retrieval and modification as needed."]},{"l":"Dock Toolbar","p":["The Dock Toolbar is a user-friendly feature located within the EDQL environment, designed to streamline connection and query management. Here are the key functionalities offered by the toolbar:","New Connection","Create a new Elasticsearch connection, allowing you to establish communication with your Elasticsearch clusters effortlessly.","Duplicate Connection","Duplicate an existing Elasticsearch connection, facilitating the replication of connection settings for convenience and efficiency.","Query Console","Create a new query in the selected connection, enabling you to execute Elasticsearch queries and retrieve data seamlessly.","Plot","Plot data from the selected connection, providing visualization capabilities for deeper insights and analysis.","Edit","Modify connection settings, index configurations, and EDQL scripts to fine-tune your Elasticsearch querying experience.","Delete","Remove connections, indexes, or EDQL elements that are no longer needed, helping you maintain a clean and organized workspace.","Configuration","Access and configure connection settings, ensuring optimal performance and compatibility with your Elasticsearch setup."]},{"l":"Connection Node","p":["Aliases","Charts","Displays all selected connection's EDQL scripts, allowing you to view, edit, and run them.","Displays all selected connection's nodes.","Displays all selected connection's transforms, allowing you to view or edit transform details.","EDQLs","Favroite functions","ILMs","Indices","Ingests","list all selected connection's tasks for view","Lists all selected connection's favorite functions.","Lists all selected connection's index lifecycle management (ILM) settings for easy viewing.","Lists all selected connection's ingests, enabling you to view or edit ingest details.","Lists all selected connection's templates, enabling you to view or edit template details.","Lists all selected indices. Double-clicking on an index allows you to run queries specifically on that index.","Nodes","Once a new connection is added in the EDQL Dock Manager, it is displayed as a connection node. Double-clicking on the connection node reveals a list of related information for that specific connection:","Plugins","Provides a list of aliases associated with the selected connection, allowing you to view or edit alias details.","Provides a list of charts associated with the selected connection for easy viewing. By default, it includes the ClusterStats chart.","Provides a list of scripts associated with the selected connection, allowing you to view or edit script details.","Provides details of all selected connection's plugins for easy viewing.","Scripts","Tasks","Templates","Transforms"]},{"l":"EDQLs Node","p":["Global EDQLs file node."]},{"l":"Charts Node","p":["Global Charts file node."]},{"l":"Documents Node","p":["Elasticsearch documentation in local."]},{"l":"Run Result Panel","p":["When you execute a query using EDQL, the run result panel conveniently appears at the bottom of the window, providing you with instant access to the query results. This dedicated panel offers a clear and organized view of the outcome of your query execution.","By displaying the run results in the bottom panel, you can easily review and analyze the returned data, ensuring a smooth and efficient workflow within the EDQL environment. The intuitive placement of the run result panel allows for seamless interaction and quick reference to the query execution outcomes."]},{"l":"Running Details Panel","p":["Show the executed details: start, finished and usage time."]},{"l":"Data Panel","p":["Show the query response: Table view, JSON view or Plot view."]},{"i":"explainprofile-panel","l":"Explain&Profile Panel","p":["Show the query explain&profile info, it's JSON structural view."]}],[{"i":"#","p":["Connection Elasticsearch and Query by EDQL"]},{"l":"Connection and Query"},{"l":"Connection","p":["Connect to Elasticsearch by using EDQL Dock Manage default on the Intellij right side. In the EDQL Dock Manager, you can add new connection to connect Elasticsearch and Test connection.","View more on:","configure-connection.md"]},{"l":"Authorization"},{"l":"Authorization Token","p":["Use authorization token to connect Elasticsearch cluster, such as basic token, bearer token or custom token"]},{"i":"username--password","l":"Username & Password","p":["Basic username, password"]},{"l":"AWS","p":["Use aws region, api key id, api key secret to connect aws Elasticsearch, also you can custom AWS profile to use"]},{"l":"General ApiKey","p":["Use general api key to connect Elasticsearch cluster, such as Elastic cloud"]},{"l":"SSH Tunnel","p":["Use an SSH tunnel to encrypt a connection between a client and a server to connect Server, Or make connections inside same VPC(Virtual Private Cloud), Example: connect aws server in the same VPC."]},{"l":"HTTP Proxy","p":["Use HTTP Proxy to connect Elasticsearch with http proxy"]},{"l":"Query Console","p":["After creating and testing a connection of Elasticsearch, You can create a new query console on the Dock Toolbar with terminal icon"]},{"l":"Query by Visual Editor","p":["After EDQL file is created, we can use the Visual Editor to configure a query action, since the common query conditions are annoying and boring. Visual Editor is a powerful tool for visual query conditions and configurations, example: term match, range query, wildcard query and size, explain etc."]}],[{"i":"#","p":["Run EDQL query on Elasticsearch: execute EDQL query action and visualize data result"]},{"l":"Run Query and Data Viewer"},{"l":"Run with Intellij IDE","p":["EDQL is a script that offers a hassle-free execution experience on the Intellij IDE. With EDQL, you can easily run and execute scripts, with the minimum run block being the Query Action. Additionally, EDQL supports running the entire script for comprehensive execution. Explore the three convenient ways to execute EDQL scripts using Intellij, providing you with flexibility and efficiency in your development workflow."]},{"l":"Run Query Action","p":["Executing a single action in EDQL is as simple as a click. Just click on the left icon of the desired action to run it instantly. Alternatively, you can use the Run shortcut when the cursor is on the request action block. You can also right-click and select \"Run\" for quick execution. These methods ensure that only the selected action runs, return the corresponding response:"]},{"l":"Run Script","p":["When your EDQL script contains multiple actions, you have the flexibility to run all actions at once. Simply ensure that the cursor is not on any specific request action block, and then use the Run shortcut to execute the entire set of requests. Alternatively, you can right-click and select \"Run\" for a quick execution. For scripts with multiple request actions, EDQL will generate multiple responses, each displayed in a separate tab for easy access and analysis:"]},{"l":"Run with Visual Editor","p":["Switching to Visual Editor mode provides an additional way to execute actions in EDQL. In this mode, you can simply use the Run button located on each action block to execute that specific action. This allows for quick and straightforward execution without the need to navigate away from the Visual Editor interface:"]}],[{"i":"#","p":["QSharp: The Standalone Elasticsearch Query IDE for Enhanced Stability and Convenience"]},{"l":"Install QSharp Elasticsearch IDE","p":["QSharp is a powerful standalone IDE designed specifically for Elasticsearch querying. Unlike the EDQL plugin that requires installation within the Intellij IDE, QSharp can be installed independently. This is particularly useful for users who prefer not to install Intellij IDE solely for using EDQL.","By opting for QSharp as a standalone IDE, you can enjoy a dedicated environment for Elasticsearch query development without impacting your Intellij IDE tasks. This separation ensures enhanced stability and allows for a focused and streamlined Elasticsearch querying experience.","Experience the convenience and stability of QSharp as you dive into the world of Elasticsearch queries, free from the need to install Intellij IDE. QSharp stands as a reliable solution for users seeking a dedicated Elasticsearch query IDE."]},{"l":"Installation","p":["Go to the QSharp Releases and choose the newest release, running platform and download. Since the macOS package is not signature, After click package, should go to the security preference and click Open Anyway to start install."]},{"l":"Open QSharp","p":["In macOS you can find the installed QSharp by LanunchPad or Application Folder","In windows you can extract package and find it on bin folder"]}],[{"i":"#","p":["Compare EDQL with Kibana and Elasticsearch Client"]},{"l":"EDQL vs Kibana vs Other Elasticsearch Client"}],[{"l":"Configure Connection","p":["Connecting to Elasticsearch Using the EDQL Dock Manager in Intellij","To facilitate seamless connectivity between Intellij and Elasticsearch, the EDQL Dock Manager offers a user-friendly solution. By utilizing the EDQL Dock Manager, users can conveniently establish connections to Elasticsearch and test the connection status.","Here's how you can connect to Elasticsearch using the EDQL Dock Manager in Intellij:","Accessing the EDQL Dock Manager: Within Intellij, locate the EDQL Dock Manager, which is typically situated on the right side of the interface. This dedicated dock provides a centralized platform for managing Elasticsearch connections.","Adding a New Connection: Within the EDQL Dock Manager, you can add a new connection by selecting the appropriate option. This action prompts the creation of a connection configuration form, where you can specify the necessary details to establish a connection to Elasticsearch. This includes information such as the Elasticsearch server address, port number, and any authentication credentials required for access.","Configuring Connection Settings: Fill in the connection configuration form with the appropriate information, ensuring accuracy and completeness. Double-check the entered details to guarantee a successful connection. Additionally, you may have the option to customize other connection settings, such as specifying SSL/TLS encryption or defining timeout parameters.","Testing the Connection: Once the connection configuration is complete, you can initiate a test connection to Elasticsearch. This action verifies the connectivity between Intellij and the specified Elasticsearch instance. The test results will indicate whether the connection was successfully established or if any errors occurred during the process.","By employing the EDQL Dock Manager in Intellij, users can effortlessly connect to Elasticsearch and validate the connection status through the convenient test functionality."]}],[{"l":"OpenAI API Key","p":["The EDQL (Elasticsearch Data Query Language) plugin offers seamless integration with the OpenAI API, enabling natural language communication with ChatGPT and facilitating intelligent Elasticsearch queries. With this integration, users can interact with Elasticsearch using plain language without the need to learn the Elasticsearch Query DSL (Domain-Specific Language), making the querying process incredibly easy.","Here's how the EDQL feature integrates the OpenAI API for effortless Elasticsearch querying:","OpenAI API Integration: The EDQL feature incorporates the OpenAI API, which provides access to advanced language models capable of natural language understanding and generation. By leveraging this API, users can communicate with ChatGPT using plain language, making the interaction more intuitive and user-friendly.","Natural Language Communication: With the OpenAI API integration, users can express their Elasticsearch queries in natural language instead of relying on the Elasticsearch Query DSL. Users can ask questions, request specific information, or describe the desired data in a conversational manner, similar to how they would interact with a human assistant.","Intelligent Query Transformation: The EDQL feature, powered by the OpenAI API, intelligently transforms the natural language queries into Elasticsearch-compatible queries behind the scenes. It automatically translates the user's plain language input into the appropriate Elasticsearch Query DSL structure, ensuring accurate and effective communication with the Elasticsearch cluster.","Effortless Query Execution: Once the natural language query is transformed into an Elasticsearch-compatible query, the EDQL feature seamlessly executes the query against the Elasticsearch cluster and retrieves the relevant data. This process is transparent to the user, requiring minimal effort on their part.","Context-Aware Responses: Through the integration with ChatGPT, the EDQL feature not only retrieves data from Elasticsearch but also incorporates it into the conversational context with ChatGPT. This enables ChatGPT to generate responses that take into account the Elasticsearch data, providing more accurate, context-aware, and meaningful answers to user queries.","By integrating the OpenAI API with the EDQL feature, users can effortlessly communicate with ChatGPT in natural language, eliminating the need to learn the Elasticsearch Query DSL. The intelligent transformation of user input into Elasticsearch-compatible queries simplifies the querying process, making it accessible to a wider range of users.","To configure the OpenAI API key using an API configuration dialog, you would typically follow these steps:","Access the API Configuration Dialog: Open the application or platform where the API configuration dialog is available. This might be a settings menu, an integration panel, or a dedicated API management interface.","Locate the OpenAI API Settings: Within the API configuration dialog, find the section or tab that pertains to the OpenAI API integration. This is where you'll be able to input and manage your API key.","Enter the API Key: In the designated field or input box, enter your OpenAI API key. Ensure that the key you provide is accurate and complete to establish a valid connection with the OpenAI services.","Save or Apply Changes: After entering the API key, save or apply the changes in the API configuration dialog. This ensures that the configured API key is stored and used for subsequent API calls."]}],[{"l":"Keyboard Shortcuts"}],[{"l":"Run Query","p":["EDQL (Elasticsearch Data Query Language) feature in Intellij provides convenient ways to execute queries and manage Elasticsearch resources. Additionally, you can convert queries written in EDQL to Java code for further integration and customization. Let's explore these features in more detail:"]},{"i":"run-query-action","l":"Run Query Action:","p":["To execute an individual request, you can simply click the right icon of the request or use the Run shortcut when the cursor is positioned on the request action block. This action runs the selected request and returns the corresponding response. It is a quick and easy way to execute single queries within your EDQL script."]},{"i":"run-script","l":"Run Script:","p":["When an EDQL script contains multiple request actions, you can run all of them together. To do this, ensure that the cursor is not positioned on any specific request action block and use the Run shortcut. This action executes all the requests in the script sequentially, and the responses are returned and displayed in separate tabs. It allows you to conveniently analyze and compare the results of multiple queries."]},{"i":"export","l":"Export:","p":["The export feature provides options for exporting query results. The \"Export Query Result\" functionality allows you to save the results of a query in various formats, such as CSV or JSON. This is useful for sharing or further analyzing the query results outside of Intellij."]},{"i":"scroll-export-by-query","l":"Scroll Export by Query:","p":["When dealing with large result sets, the scroll export feature is beneficial. It enables you to export query results in smaller batches, making the process more efficient and manageable. This helps prevent overwhelming system resources and ensures smoother execution of exports."]},{"i":"query-conversion-to-java","l":"Query Conversion to Java:","p":["In addition to running queries in EDQL, Intellij also offers the capability to convert EDQL queries to Java code. This is useful if you want to incorporate and customize your queries within Java applications. By converting the queries to Java, you can take advantage of the Elasticsearch Java API and its features.","To convert an EDQL query to Java, you can use the appropriate code generation or conversion tools available in Intellij. These tools typically provide options to automatically generate Java code that corresponds to your EDQL query. Once the conversion is complete, you can integrate the generated Java code into your Java application, allowing for seamless interaction with Elasticsearch."]},{"i":"manage","l":"Manage:","p":["The manage section in Intellij provides various functionalities for managing Elasticsearch resources. Some of the key features available include:","Create Index: This action allows you to create a new index in Elasticsearch, specifying the desired settings and mappings.","Delete Index: Use this action to remove an existing index from Elasticsearch.","Export Data: Export data from Elasticsearch to an external file or destination.","Import Data: Import data from external sources into Elasticsearch.","Create Template: Define templates that specify mappings and settings for new indices.","Create Alias: Create an alias, which is an alternate name for an index or a group of indices.","Create Script: Develop custom scripts for advanced data processing and transformations.","Create Pipeline: Define an ingest pipeline for preprocessing data before indexing.","Reindex: Perform data reindexing from one index to another, potentially applying transformations or filtering.","Rebuild: Optimize indices by rebuilding them, refreshing and optimizing them for improved performance.","Templates, Tasks, Ingests, Plugins, Plot: These sections provide additional management functionalities for templates, tasks, ingest pipelines, plugins, and plotting, respectively.","The EDQL run query feature in Intellij, along with the ability to convert queries to Java, provides a comprehensive set of tools for executing and managing Elasticsearch queries. Whether you prefer working with EDQL or integrating queries into Java applications, Intellij offers the flexibility and functionality to streamline your Elasticsearch workflows."]}],[{"i":"#","p":["quickly run function with params by action shortcut"]},{"i":"function-as-intellij-action-favorite-function","l":"Function as Intellij Action: Favorite Function","p":["EDQL has introduced a powerful feature that integrates EDQL functions seamlessly into the IntelliJ IDE, providing a familiar and efficient environment for query development. With EDQL Function as IntelliJ Action, developers can write, execute, and manage their EDQL functions directly within IntelliJ, leveraging the IDE's rich features and enhancing productivity. This integration enables a streamlined workflow, eliminating the need to switch between multiple tools and enhancing the overall developer experience. EDQL Function as IntelliJ Action empowers you to develop Elasticsearch queries with ease and efficiency."]},{"l":"1. Launch EDQL and Open the Editor","p":["Open EDQL and navigate to the editor section where you can create and edit your functions."]},{"l":"2. Create a Function","p":["In the editor, create a new function by typing the following code:","This function sends a POST request to the \"fff/_search\" endpoint with an empty request body. Modify the endpoint and request body as per your specific requirements."]},{"l":"3. Save the Function","p":["Click on the \"Save\" button or use the appropriate keyboard shortcut to save your function. Give it a meaningful name, such as \"getIds\"."]},{"l":"4. Assign the Function as a Favorite","p":["In the editor's right sidebar, locate the favorite icon associated with the \"getIds\" function. Click on the favorite icon to mark the function as a favorite."]},{"l":"5. Execute the Function","p":["To execute the function, you have a couple of options:","Option 1: Using Keyboard Shortcut","Press \"Cmd+A\" (Mac) or \"Ctrl+A\" (Windows) to select the entire function code.","Press \"Enter\" or click the \"Run\" button to execute the selected function.","Option 2: Using Favorite Icon","Click on the favorite icon in the right sidebar to select the entire function code."]},{"i":"6-input-parameters-if-applicable","l":"6. Input Parameters (if applicable)","p":["If your function requires input parameters, a parameter dialog may appear after executing the function. Enter the specific parameter values as required or use the existing parameters if applicable."]},{"l":"7. Run or Cancel the Execution","p":["In the parameter dialog, click the \"Run\" button to execute the function with the provided parameters. If you wish to cancel the execution, click the \"Cancel\" button.","That's it! You have created a function in EDQL, marked it as a favorite, and executed it using the keyboard shortcut or favorite icon. You can input parameters for the function and choose to run or cancel the execution as needed."]}],[{"i":"#","p":["Intellij IDE support for EDQL DSL editor"]},{"l":"DSL Editor"},{"l":"File Template"},{"l":"Live Templates","p":["aggs","avg","bool","catHealth","catIndices","catNodes","clusterHealth","clusterStats","count","createIndex","Defined Live Templates:","EDQL plugin already defined the common used Live Templates for intelligence, easily and quickly to write the request action or query conditions, so when input the below keyword, the Live Template will automatically expand.","exists","explain","field","filter","from","getNodes","mapping","must","mustNot","notEmpty","profile","qbf","qbm","range","regexp","script","search","should","size","sort","source","tasks","term","terms","wildcard"]},{"l":"Highlight","p":["Highlight includes two parts for edql, for now it supports:","highlight for reservered words","HOST","Authorization","local","…","highlight for key characters","brackets","number","comment","colon","TODO: In next step will try to support semantics hilightling"]},{"l":"Autocomplete","p":["Autocomplete includes two ways autocomplete for edql:","Keywords autocomplete","Usually include the reserved words and keywords for edql, example: HOST, Authorization, POST, GET, DELETE, PUT, local etc","Live Templates autocomplete","Live Templates are defined for autocomplete the query dsl, example: qbm, qbf, size, terms, term, queryString, search etc","TODO: autocomplete auto integrates with the current dsl, such as remove extra bracket"]},{"l":"Refactor","p":["Refactor is an import way for coding, for now edql supports: rename variable, rename function name"]},{"l":"Format","p":["Format support to format Query DSL blocks, includes: function, variable, JSON block, array block etc. it’s a simple way to make code is clean"]}],[{"i":"#","p":["Visual Editor for Help Quickly Generate Elasticsearch Query DSL in EDQL"]},{"l":"Visual Editor","p":["Always complex Query DSL syntax is hard to learn and remember, also not easy to view if we only want to query by some simple conditions, example: must, must_not, term, terms, range etc.","So EDQL has implemented a powerful feature for visualize write query conditions by using interactive Visual Editor.","EDQL visual editor can help quickly generate Elasticsearch Query DSL with visual configurations; we just need to set the query type, filed name and field value. after these we can directly run this Query Action on Visual Editor, also if we switch back to script mode, the generated Query DSL also will be synced."]},{"l":"Switch in Visual Editor","p":["Create Visual Action","Configure Query","Delete Query Condition"]}],[{"i":"#","p":["Visualization is useful for analysis data and find data value"]},{"l":"Data Browser"},{"l":"Run Result Panel","p":["After running Elasticsearch query, the running result will display on a result panel, result panel include: left, middle and right panels."]},{"l":"Execution Details","p":["Execution details display time usage for query"]},{"l":"Data Panel","p":["Display the query result data, support 3 mode: table mode, json mode and plot mode:","table mode will flatten Elasticsearch source data to row and remove noise data","json mode will display whole query result as foldable json data","plot mode will display query data by vega-lite format"]},{"i":"explainprofile-panel","l":"Explain&Profile Panel","p":["Display the query explain and profile info when a run query with \"explain\": true, \"profile\": true"]},{"l":"Table Mode","p":["Elasticsearch most of the data can be displayed as table mode includes: source hits, aggregation response, mapping and templates, etcs."]},{"l":"Documents","p":["Elasticsearch source hits documents default will display as table view and will remove noise info: shards, time etc."]},{"l":"Aggregations","p":["Aggregation result always includes a nest object, it's hard to display and view, but EDQL has achieved flatten nested object to table view. So we can quickly and easily view the aggregate result."]},{"l":"Mappings","p":["Index mapping in Elasticsearch designs its nest object json. But usually we just want to focus on a field type and name."]},{"l":"Features","p":["Search","Add","Edit","Delete","Commit","Fields Filter","Fit Pane"]},{"l":"JSON Mode","p":["In sometime some data it's hard to display table directly, In these scenarios the query response will directly display as JSON"]},{"l":"Plot Mode","p":["In plot mode, user can plot by using vega-lite syntax to plot Elasticsearch response."]},{"l":"Plot Aggregation","p":["plot metric","plot date histogram","plot stats","multi line plot"]}],[{"i":"#","p":["Flexible Elasticsearch Document Index Data Export with Multiple Formats"]},{"l":"Export","p":["EDQL export feature offers several convenient options to customize and optimize your export process:","Scroll Download: With scroll download functionality, you can export large result sets that exceed the maximum number of rows displayed on the screen. This ensures that you can export complete query results, even if they span multiple pages.","Download by Run Action: By simply clicking the run icon, you can initiate the export process and download the current result table directly. This quick and intuitive action saves you time and streamlines the export workflow.","Visual Editor Download: The visual editor in EDQL provides a user-friendly interface for crafting queries. With the export feature integrated into the visual editor, you can effortlessly export query results while working on your queries.","Format Options: EDQL supports multiple export formats, including CSV, Excel, and JSON. When exporting to CSV and Excel formats, noise data such as \"_hits\" and \"took\" will be automatically removed, ensuring cleaner and more focused exported data.","The EDQL export feature now includes an automatic folder reveal functionality, simplifying the process of accessing your exported Elasticsearch data. After initiating the export, the plugin automatically reveals the destination folder where the exported files are saved.","With this automated folder reveal, you can seamlessly navigate to the exported data without the need to manually search for the destination folder."]}],[{"i":"#","p":["EDQL's Import Feature for Elasticsearch Index"]},{"l":"Import","p":["EDQL provides a robust import feature that simplifies the process of importing documents into an Elasticsearch index. Here's a step-by-step guide on how to use this feature:","Connect to Elasticsearch: Launch the EDQL Dock Manager and establish a connection with your Elasticsearch cluster. Double-click the connection node to configure and establish the connection.","Select the target index: Navigate to the desired index within the EDQL Dock Manager. Right-click on the index node to open the context menu.","Choose \"Import\" option: From the context menu, select the \"Import\" option. This action will open the import dialog specific to the selected index.","Specify the import file format: In the import dialog, choose the file format of your documents. EDQL currently supports CSV and Excel formats for importing.","Select the import file: Browse your system and select the CSV or Excel file containing the documents you want to import. Ensure that the file adheres to the expected format, with the first line containing field names and subsequent lines containing the corresponding document data.","Start the import: Click the \"Import\" or \"Start\" button within the import dialog to initiate the import process. EDQL will read the file and automatically map the fields in the first line to the index properties in Elasticsearch.","Monitor the import progress: The import dialog will display a progress bar indicating the import progress. You can monitor this progress to track the completion status.","Cancel the import (if needed): If you need to cancel the import process for any reason, you can click the \"Cancel\" or \"Stop\" button within the import dialog. This action will halt the import, allowing you to abort the operation.","Verify the import: Once the import is complete, you can verify the imported documents by querying the Elasticsearch index using EDQL or any other Elasticsearch querying tool.","EDQL's import feature streamlines the process of importing documents into your Elasticsearch index. It provides support for CSV and Excel formats, allowing you to easily import structured data."]}],[{"i":"#","p":["EDQL Script File"]},{"l":"EDQL Script Usage","p":["EDQL script is used for creating a standlone script file, for connect Elasticseach and run query, it's context base, so we can use function variable to do some complex queries.","EDQL is based on Intellij, for different use cases there are two places to save new edql script:","store on EDQL dock manager","store on current project directory"]},{"l":"New EDQL by Dock Manager","p":["EDQL manager dashboard is used to manage the EDQL files, it will share cross projects, so we can use this place to store the EDQL files that will be used anywhere.","it will auto fill the HOST, Timeout and Authorization with a simple EDQL Action, the EDQL file will be stored in the Manager like the Scratches files."]},{"l":"New EDQL by New file","p":["it will automatically load the EDQL file template, include: HOST, Timeout , Authorization and with a simple EDQL Query Action. this file will be stored on the current directory"]},{"l":"Configurations"},{"l":"HOST","p":["HOST is target to Elasticsearch/Opensearch cluster master host endpoint or gateway"]},{"l":"KIBANA_HOST","p":["In some cases we can't directly connect to Elasticsearch Cluster host, only Kibana is exposed to use, in this case we can configure the KIBANA_HOST to proxy query from Elasticsearch"]},{"l":"Timeout","p":["Timeout is used to configure every action request timeout, like query, write and delete etc","Caution: this only limit the request timeout, not this action execute time."]},{"l":"Authorization","p":["If Elasticsearch/Opensearch cluster has configured Authorization, we need to configure the Authorization to connect Elasticsearch Cluster","basic authorization, elastic cloud authorization, AWS credentials"]},{"l":"Authorization header"},{"l":"Basic Username and Password"},{"l":"ApiKey Credential"},{"l":"AWS Credential","p":["aws has another configuration of aws region"]},{"l":"Query Action","p":["Elasticsearch query action includes 4 parts:","Query Methods: GET, POST, DELETE and PUT","Query Index: the index name for query","Query Type: search, mapping","Query Body: the JSON body for query conditions"]},{"l":"Query DSL Body","p":["Query DSL body is the same as the official Query DSL block: QueryDSL, it's a JSON format with the query configurations. since EDQL is based on Intellij, it supports autocomplete, format and live templates, example: qbm, range, wildcard etc."]}],[{"l":"EDQL Files","p":["EDQL Files node is a versatile feature within the EDQL (Elasticsearch Data Query Language) ecosystem that serves as a centralized repository for storing and managing EDQL script files."]}],[{"l":"Chart Files","p":["The Chart Files node is a powerful feature within the EDQL (Elasticsearch Data Query Language) ecosystem that provides a centralized repository for storing and visualizing chart files."]}],[{"l":"Scratches","p":["The Scratches node is a valuable feature within the EDQL (Elasticsearch Data Query Language) ecosystem that offers a sandbox environment for experimentation and exploration. Designed to facilitate rapid prototyping and ad-hoc querying, the Scratches node provides a dynamic space where you can interactively test and refine your EDQL queries without affecting your main data or indexes."]}],[{"i":"#","p":["Search documents from Elasticsearch: filter, highlight, modify and export result set"]},{"l":"Query"},{"l":"Search Documents","p":["Elasticsearch is a powerful search engine and has complex and features query dsl syntax for search and analysis documents. but the query syntax it's complex and has a hard curve to learn. EDQL is trying to improve the learning curve with supporting primitive Elasticsearch query syntax and IDE support(highlight, autocomplete, document etc).","We can just copy the query demo from Elasticsearch document website, paste to EDQL script and run for quickly verify the result. Also, we can try to test Elasticsearch new features by using EDQL script.","Since EDQL is a script file, we can create EDQL scripts for daily search and search shortcuts. and these scripts can be shared by projects and team, help other people for quickly search from Elasticsearch without extra effort.","With search result can be displayed compact data table, it's easy to filter document, highlight document and modify document.","Also EDQL has a powerful Visual Editor, it can help quickly to search document by configure queries without writing code, the Visual Editor has the Layout mode, we can just run queries to search document, for example: team share EDQL scripts for search documents"]},{"l":"Export Documents","p":["In some cases, we want to download Elasticsearch documents for analysis or sharing; EDQL supports two modes download Elasticsearch documents, for now both modes only support download as CSV file"]},{"l":"Download Search Result-Set","p":["Download search result-set is for when run the EDQL query action, want to download current documents table, the download documents only limit the EDQL query action return current result size determined by query action: \"size\" parameter"]},{"l":"Download by Query","p":["Download by query is based on Visual Editor, it default will use scroll download the query action whole documents, when start downloading you can configure the scroll size. it will download whole documents that match the query action, it maybe takes a long time to export determined by the query hits. EDQL also has support to cancel the long time downloading on progress bar with Cancel button"]},{"i":"edql-syntax-could-find-on","l":"EDQL syntax could find on:","p":["basic-syntax.md"]}],[{"l":"Aggregate"},{"l":"Aggregations","p":["Elasticsearch is good at analysising documents by using Aggreagation feature, for example: max, min, , mean or sum value etc. Aggregation has 3 aggregation categories, include: bucket, metrics and pipeline mode.","EDQL fully support Elasticsearch Aggregation syntax for quickly statistic documents. and since it's based on Intellij platform, have built a lot of Aggregation templates for quickly write aggregation term, for example: max, min etc.","also EDQL support function we can create the custom aggregation function as a aggregation shortcut for usage:"]},{"l":"Plot and Visualize","p":["In most time, we not only just want to statistic documents, also need to plot data, especially for time series, buckets or range aggregation result. EDQL support the plot syntax in Query Action, we can easily to plot Aggregation result with the custom chart parameters. also the chart is interactive, can be used to deeper analysis or mark.","This example aggregation by time with week and month interval, we configure visualization by plot configure, include two line: ff and tt with x axis and y axis, set the chart type as line. after run this Query Action, we can use the Run Result window to display these charts and interactive include: zoom, selective, filter or marker etc","See more on:","data-browser.md"]}],[{"i":"#","p":["Manage Elasticsearch cluster: cluster setting, index, script, template and tasks"]},{"l":"Management","p":["Elasticsearch Cluster has many metrics need to observe all the time, Example we often need to check whether cluster health, index stats or tasks background running.","EDQL has provided full features to manage Elasticsearch cluster by interactive action include: cluster, nodes, index, tasks etc. so we can simply observe Elasticsearch metrics by EDQL without any extra effort."]},{"l":"Indices","p":["Manage Elasticsearch index with EDQL is very simple, all actions are interactive without any extra effort."]},{"l":"List Indices","p":["List of all indices of Elasticsearch, this action will query indices and display index details as table, include:","name","documents","size"]},{"l":"Create Index","p":["EDQL has built an ui of create index table, we can configure new index by seting field name, field type and nest field type(properties or field), for nest field we can use \"a.b\" for nest field path. when executing the index creation, EDQL will automatically expand nest field path as nest document","Also EDQL support creating index by copying from another index, we can use copy from index action to import other index mapping","By default EDQL create index action use default index type _doc, if want specify other type, you need set the custom index type on index type field","After creating index successfu, the create index table will be closed and redirect to Indices table, if create failed, such as index name duplicate or name is illegal, the error popup dialog will show up"]},{"l":"Delete Index","p":["When using Indices table we can use delete action for deleting index with selected index"]},{"l":"Modify Index","p":["When using Indices table we can modify an existed index by using modify action, modify action will open a new table dialog with all indiex fields will be displayed, in the modify table dialog we can add new fields, since Elasticsearch cannot support modify exist fields"]},{"l":"Reindex","p":["EDQL support reindex index by using Reindex action, so if need to switch new index, we can use this action for quickly reindex data to new index.","Run Async config used to control Reindex aciton task whether run in background"]},{"l":"Import Index","p":["In some times, maybe need to index data into index, EDQL support import an csv data with header, it will use header as field name, index line by line as documents into Elasticsearch index"]},{"l":"List Index Fields","p":["List index fields for selected index."]},{"l":"Flush Index","p":["flush the selected index"]},{"l":"Close Index","p":["close the selected index"]},{"l":"Refresh Index"},{"l":"Stats Index","p":["stats index info"]},{"l":"Recovery Index"},{"l":"Rollover Index"},{"l":"Aliases"},{"l":"List Aliases","p":["List Elasticsearch all aliases."]},{"l":"Edit Alias","p":["Edit Index alias"]},{"l":"New Alias"},{"l":"Delete Alias"},{"l":"Templates","p":["Template action displays Elasticsearch all templates in a table. for manage Templates."]},{"l":"List Templates","p":["List cluster templates."]},{"l":"Edit Template","p":["Edit index template."]},{"l":"Delete Template","p":["Delete index template."]},{"l":"Scripts"},{"l":"List Scripts"},{"l":"Create Script"},{"l":"Edit Script"},{"l":"Delete Script"},{"l":"Ingests"},{"l":"List Ingests"},{"l":"Create Ingests"},{"l":"Edit Ingests"},{"l":"Delete Ingests"},{"l":"Transforms"},{"l":"List Transforms"},{"l":"Create Transforms"},{"l":"Edit Transforms"},{"l":"Delete Transforms"},{"l":"Plugins"},{"l":"List Plugins"},{"l":"ILMs"},{"l":"List ILMs"},{"l":"Edit ILM"},{"l":"Delete ILM"},{"l":"Snapshots","p":["Snapshot action displays Elasticsearch all snapshots in a table. For manage snapshots."]},{"l":"Tasks","p":["Tasks action show up cluster current tasks with action, task_id, type, starttime, runningtime, ip and node metrics.","We can use this action quickly find current running tasks with their state"]},{"l":"Cluster Monitor","p":["EDQL has the cluster observer ability for user to monitor cluster states."]},{"l":"Health","p":["Health can view current cluster health state"]},{"l":"Stats","p":["Stats show up current cluster stats"]},{"l":"State","p":["State show up current cluster state"]},{"l":"Nodes","p":["Nodes action show up cluster all nodes with ip, heap, ram, cpu, load, role metrics etc","We can use this action to quickly view current cluster node states"]}],[{"i":"#","p":["Visualize Elasticsearch Responses Using Vega-Lite Syntax"]},{"l":"Plot","p":["The Plot Mode feature offers users the ability to visualize Elasticsearch responses using the powerful syntax of Vega-Lite. With this feature, users can easily create visually appealing and interactive plots based on the data retrieved from Elasticsearch.","Here's how the Plot Mode works:","Elasticsearch Response Integration: The Plot Mode seamlessly integrates with Elasticsearch by allowing users to directly incorporate Elasticsearch responses into their plots. Users can retrieve data from Elasticsearch using EDQL queries or any other Elasticsearch querying method, and then utilize the response data to generate insightful visualizations.","Vega-Lite Syntax: Plot Mode leverages the expressive syntax of Vega-Liteto create plots. Vega-Lite is a high-level declarative language for building visualizations, which makes it easy for users to specify the desired visual encoding, such as the type of chart (e.g., bar chart, line chart, scatter plot), the mapping of data fields to visual properties (e.g., x-axis, y-axis, color, size), and additional interactive features (e.g., tooltips, zooming, filtering).","Interactive and Customizable Visualizations: With Plot Mode, users can create interactive visualizations that enable exploration and analysis of Elasticsearch data. They can customize the appearance and behavior of their plots by adjusting various parameters and styling options available in Vega-Lite syntax. This flexibility empowers users to tailor the visualizations to their specific needs and effectively communicate insights from the data.","Data Transformation and Aggregation: Plot Mode provides the capability to perform data transformations and aggregations on Elasticsearch responses before plotting. Users can leverage the full range of data manipulation functions available in EDQL or other Elasticsearch querying methods to preprocess the data and extract meaningful information for visualization. This allows for more advanced and tailored visual representations of Elasticsearch data.","Seamless Integration with EDQL: Plot Mode seamlessly integrates with the EDQL ecosystem, enabling users to combine the power of EDQL queries with the visualization capabilities of Plot Mode. Users can easily incorporate EDQL queries to retrieve Elasticsearch data, apply filters, aggregations, and other operations, and then pass the processed data to Plot Mode for visualization using Vega-Lite syntax.","By utilizing Plot Mode, users can effortlessly create visually compelling plots based on Elasticsearch responses. The integration with Vega-Lite syntax and the ability to customize visualizations provide a powerful toolset for data exploration and presentation. Experience the versatility and expressiveness of Plot Mode to efficiently analyze and communicate insights from your Elasticsearch data."]}],[{"l":"Aggregate and Plot by EDQL"}],[{"i":"#","p":["basic EDQL syntax for help quickly use EDQL"]},{"l":"Basic Syntax"},{"l":"Connection","p":["When firstly prepare to query from Elasticsearch, we need to configure how to connect the Elasticsearch cluster"]},{"l":"Authorization","p":["If the Elasticsearch Cluster needs authorization to connect, configure authorization, there are three ways to achieve that."]},{"l":"Authorization Header","p":["If Elasticsearch Cluster supports http basic Authorization header, we can configure Authorization header directly by:","The token should compute by base64 with username and password, see more: HTTP/REST clients and security and Elasticsearch Token Service tokens"]},{"l":"Basic Username and Password","p":["For if you don’t want use Authorization header, you can directly use the reserverd words Username and ** Password** to configure the Authorization:","see more: Basic Authentication"]},{"l":"ApiKeyId and ApiKeySecret","p":["If you are using the Elastic Cloud, you can use the ApiKeyId and ApiKeySecret to connect Elastic Cloud by:","see more: ApiKeySecret"]},{"i":"aws-iam-apikeyid-apikeysecret-and-apisessiontoken","l":"AWS IAM: ApiKeyId, ApiKeySecret and ApiSessionToken","p":["If you are using the AWS Opensearch, you can use the AWSRegion to activate aws credential:"]},{"l":"Timeout","p":["Timeout is used to control the query actions timeout for Elasticsearch Cluster, it will apply to every action in current context. set Timeout by:","this will set timeout for action 1 second."]},{"l":"Query Actions","p":["Query Actions is same with Elasticsearch REST APIs, but in edql context defined it as Query Actions. so we can copy from Elascticsearch offical sample requests and execute these directly. such as:","query from my-index with bool query and filter.","why called it as REST Actions not REST APIS? since have enhanced the apis such as variables and functions etc, maybe call it as Action maybe better."]},{"i":"query-dsl-json-block","l":"Query DSL: JSON Block","p":["Query DSL JSON Block is the same as Elasticsearch query DSL definition, we can write these query contexts in the current block. such as bool query, aggregation etc. Example:"]}],[{"i":"#","p":["with script syntax, support abstract and create common functions"]},{"l":"Script Syntax"},{"l":"Variable","p":["In edql we can define variable to control the context logics, if we need to query multi indexes with the same query conditions, we can use variable as a Query DSL Block for these multiple actions, example:","we define p variable for title keywords and extract it as array by jq, in for loop we iterate all keywords"]},{"l":"Function","p":["Function is used to abstract the common logics and for building custom library for your own projects. such as data dictionary, common query logics for quickly query data and locate data issues."]},{"l":"System Function","p":["System Function is edql already defined functions for supporting file IO etc. example:","readJSON","read json file from file path","writeJSON","write variable to file path","jq","used to extract json value as json type variable","TODO readExcel","TODO writeExcel"]},{"l":"Define Function","p":["Define Function this is for user abstract common query logics, example:","quickly aggregation current my index title keywords"]},{"l":"Import","p":["import keyword is used to import other edql script as a library, we use this feature to design or create default functions. for import, there are two path could be used"]},{"l":"From Local File","p":["EDQL will find import script by absolute path to load import file."]},{"l":"From Github","p":["EDQL will load import script from GitHub when using an HTTP url in import"]},{"l":"Iteration","p":["EDQL supports an iterated collection by for loop, so in some times we want query results from a collection, it's easy to achieve this"]},{"l":"Comment","p":["comment in edql script by using #"]}],[{"i":"#","p":["a list of glossaryies for EDQL"]},{"l":"Glossary","p":["ApiKeyId","ApiKeySecret","Authorization","AWSRegion","comment","Connection","DELETE","for","function","GET","Host","import","Password","POST","PUT","Timeout","Username","var"]}],[{"i":"effortlessly-convert-elasticsearch-query-dsl-to-code-java-python-curl-by-chatgpt","l":"Effortlessly Convert Elasticsearch Query DSL to Code (Java, Python cURL) by ChatGPT"},{"l":"Background","p":["Elasticsearch's powerful query capabilities are undoubtedly a game-changer, but the complexity of the DSL can often be a barrier for developers. Translating these queries into the appropriate code format, whether it's Java, Python, cURL, or any other language, can be a time-consuming and error-prone process."]},{"i":"the-solution-edql---convert-feature","l":"The Solution: EDQL - Convert feature","p":["EDQL, the Elasticsearch Query GUI client, has been designed to address this challenge head-on. With its latest feature, DSL Query Conversion, users can now effortlessly translate their Elasticsearch DSL queries into a variety of programming language formats, including:","Java","Python","cURL","Other Language","This innovative feature leverages the power of large language models, such as ChatGPT and other AI-generated content (AIGC) technologies, to provide accurate and reliable code translations. Users can translate their Elasticsearch DSL query automatically generate the corresponding code snippets for their desired programming language. So users can easily to test query and convert query to code for quickly debug and verify result."]},{"l":"Unleash the Power of EDQL","p":["Experience the transformative power of EDQL's Query Conversion feature and take your Elasticsearch workflow to new heights. Download EDQL today and witness the seamless integration of Elasticsearch DSL into your preferred programming languages, unlocking a world of possibilities for your data management and analysis needs.","https://chengpohi.github.io/getting-started/install-edql-on-intellij/"]}],[{"l":"Chat Query Elasticsearch and Run Query","p":["Are you tired of memorizing complex Elasticsearch query DSL syntax? Do you wish there was an easier way to query Elasticsearch? Look no further than the Elasticsearch Query Plugin EDQL, which now features a new Chat Query Elasticsearch capability powered by ChatGPT 3.5 Turbo.","With the Chat Query Elasticsearch feature, users can now query Elasticsearch using natural language in a chat format. This means that users can simply ask ChatGPT a question about the data they want to retrieve, and the plugin will generate the appropriate Elasticsearch query DSL. The Chat Query Elasticsearch feature is especially helpful for users who’re new to Elasticsearch or who don't want to spend time memorizing complex query syntax.","The Chat Query Elasticsearch feature uses the ChatGPT 3.5 Turbo model to understand user queries and generate the appropriate Elasticsearch query DSL. This means that the plugin is smart and can generate complex queries based on the context of the conversation. Additionally, the chat query feature supports context, which means that users can start by querying an index, such as \"query index my-index,\" and then add more details to the query using natural language, such as \"field=222.\" The plugin will generate the complete query DSL based on the chat context.","EDQL is an IntelliJ plugin that can be easily installed and integrated with your development environment. With the new Chat Query Elasticsearch feature, users can easily retrieve data from Elasticsearch without the hassle of remembering query syntax. This can save developers time and effort, allowing them to focus on more important tasks.","The EDQL plugin also supports querying document data, as well as cluster stats and node stats. Users can simply type their query commands into the chat interface and receive the corresponding data as a result. For users who prefer SQL over Elasticsearch query DSL, the plugin can also help convert SQL queries to Elasticsearch query DSL.","The EDQL plugin is still in development, and feedback is welcome on the project's GitHub page at https://github.com/chengpohi/edql. In conclusion, the Elasticsearch Query Plugin EDQL's new Chat Query Elasticsearch feature powered by ChatGPT 3.5 Turbo is a game-changer for Elasticsearch querying. It offers a simple and intuitive way to retrieve data from Elasticsearch, without the need to memorize complex query syntax. Give it a try today and see how it can improve your Elasticsearch querying experience."]}],[{"l":"EDQL Smart Completion Elasticsearch Query DSL by ChatGPT"},{"l":"Background","p":["Intellij is a very powerful development tool widely used for software development. As ChatGPT models trained by OpenAI smarter and smarter, we have developed an Intellij plugin called EDQL. This plugin translates ChatGPT's ability to write Elasticsearch DSL.","Install and Try: https://github.com/chengpohi/edql/releases/"]},{"i":"edqls-capabilities-natural-language-to-code-conversion","l":"EDQL's capabilities: natural language to code conversion","p":["EDQL is a plugin for Intellij platform, which integrates Intellij and ChatGPT's capabilities, and brings ChatGPT's intelligent complementary capabilities to Intellij, helping developers to realize the ability to generate executable code based on transforming natural language in annotations, in order to also try to introduce more capabilities.","Also, EDQL supports users to configure their own OpenAI api key, stop words, prompt, etc., and use prompt to achieve more accurate code generation or completion. Usage:","When the cursor is in the comment, use the shortcut ALT + BACK_SLASH to request code generation, then after getting the completion, the editor will show the suggested completion","if it meets the current completion, use the TAB key to apply the code to insert the code block","if not use ESC to cancel the completion, then modify the comment to continue to request the completion.","The default complement model for the current language configuration is GPT3 (text-davinci-003)."]},{"i":"privacy-safe-and-secure-code-generation","l":"Privacy: safe and secure code generation","p":["EDQL plugin has a built-in default OpenAI key, which can only be implemented using the code-davinci-002 model, because at this stage the model is free, while for the smarter chatgpt model: text-davinci-003 requires users to fill in their own api key manually. For sending requests: Currently Only the content of the caret where the editor cursor is located will be sent to openai, of course for privacy, it is strongly recommended to use your own openai key."]},{"i":"future-plans-smarter-and-better-features","l":"Future plans: smarter and better features","p":["We plan to keep improving the EDQL plugin in the future to make it smarter and better. We will add new features such as smarter context and completion, and test code generation. We will continue to work hard to meet the needs of our users for better, more useful and convenient code generation tools. We hope that EDQL will become a great tool for developers, helping them to be more productive and save more time, so that they can focus more on the logic and implementation of the code. The future EDQL will definitely be smarter and better, and become an indispensable tool for developers."]}],[{"i":"smart-query-elasticsearch-with-openai-natural-language-completionchatgpt-models","l":"Smart Query Elasticsearch with Openai Natural Language Completion(ChatGPT models)"},{"l":"Background","p":["Users often use Elasticsearch Query DSL to help them query data quickly. But when querying with complex DSL syntax, there are still some problems, such as syntax errors or inaccuracies, leading to countless bugs in the code, and it is a real headache to find the bugs that have appeared in thousands of codes.","To solve this problem, we innovatively adopt the hottest ChatGPT model now provided by OpenAI in the EDQL plugin, by combining ChatGPT with Elasticsearch DSL, to help people use natural language in Intellij IDE to query data easily and improve search efficiency. (In the test GPT3 model is able to convert natural language into most accurate queries)","Install and Try it: https://github.com/chengpohi/edql/releases"]},{"l":"What is EDQL","p":["EDQL is a professional query and management tool for Elasticsearch based on the Intellij platform. It is used to manage Elasticsearch clusters and query data from Elasticsearch with the following features.","EDQL is fully compatible with the official Query DSL, and you can directly copy the Query DSL and run it on EDQL without any extra effort.","EDQL has a visual editor that allows you to quickly write query conditions through an interactive UI.","With a powerful scripting engine: support for functions, variables, iterations, etc. Using Smart Intellij, you can easily write query DSL (refactoring, extraction, etc.)."]},{"l":"What is the ChatGPT model","p":["OpenAI's ChatGPT model is a pre-trained natural language processing model that generates natural language text. It is a large deep learning model that has been widely used for a variety of natural language processing tasks.","What ChatGPT features are accessed in the EDQL plugin","Support custom OpenAI ChatGPT api key Open EDQL plugin, you can set a custom api key, and then you can experience its powerful functions at will.","Support stop words, prompt prefixes and suffixes Code-DaVinci-002, which we have access to in EDQL, is a chatbot model based on OpenAI's GPT-3 technology. The Code-DaVinci-002 model has been rigorously trained and tested to provide accurate, timely, and professional knowledgeable answers and advice. In addition, the Code-DaVinci-002 model also supports custom dictionaries, stop words, hint prefixes and hint suffixes to improve query efficiency and accuracy.","Intelligent recommendation of search terms ChatGPT can also intelligently recommend relevant search terms based on search history and other related information for faster and more convenient query data."]},{"i":"what-are-the-benefits-of-using-chatgpt-in-edql-plugin","l":"What are the benefits of using ChatGPT in EDQL plugin?","p":["No need to remember complicated syntax or struggle to understand the characteristics of the language. Have you ever encountered a situation where you are writing code and can't think of a certain syntax, making it impossible to continue writing? With ChatGPT, you only need a few words to tell it what you need, and it will write the code for you without having to memorize the syntax that is always being updated.","ChatGPT can improve your work efficiency by answering your questions quickly and accurately, reducing the time spent on researching and finding information. In addition, using ChatGPT technology allows you to quickly generate code, save time on handwritten code, and check and modify code to ensure correctness and quality. chatGPT can also assist programmers in performing documentation and project management tasks, further improving productivity.","Reduce or avoid code bugs. ChatGPT can help you find bugs quickly and provide the right code solution to reduce code errors."]}],[{"i":"#","p":["long term wildcard query can cause cluster crash"]},{"l":"Wildcard Query causes Cluster Crash"}],[{"i":"support-edql","l":"Support EDQL \uD83C\uDF89\uD83C\uDF89\uD83C\uDF89","p":["By ETH address: 0x0D2b5a6058d3e3E1bdB0BaFF0A48bFf0eC205Dd2","By Depay: https://link.depay.com/4E72qeMls2w333TEuTa2Op"]}]]